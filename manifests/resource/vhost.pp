# define: nginx::resource::vhost
#
# This definition creates a virtual host
#
# Parameters:
# [*ensure*] - Enables or disables the specified vhost (present|absent)
# [*server_names*] - List of vhostnames for which this vhost will respond. Default [$name].
# [*default_server*] - inserts the 'default_server' attribute into this vhost's listen directive. Do not use this on more than one vhost per machine.
# [*listen_ip*] - Default IP Address for NGINX to listen with this vHost on. Defaults to all interfaces (*)
# [*listen_port*] - Default IP Port for NGINX to listen with this vHost on. Defaults to TCP 80 or 443, depending on $ssl
# [*index_files*] - Default index files for NGINX to read when traversing a directory
# [*proxy*] - Proxy server(s) for the root location to connect to. Accepts a single value, can be used in
# conjunction with nginx::resource::upstream
# [*proxy_read_timeout*] - Override the default the proxy read timeout value of 90 seconds
# [*ssl*] - Indicates whether to setup SSL bindings for this vhost.
# [*ssl_cert*] - Pre-generated SSL Certificate file to reference for SSL Support. This is not generated by this module.
# [*ssl_key*] - Pre-generated SSL Key file to reference for SSL Support. This is not generated by this module.
# [*force_ssl*] - Inserts a directive that rewrites non-ssl requests to use https.
# [*www_root*] - Specifies the location on disk for files to be read from. Cannot be set in conjunction with $proxy
# [*access_log*] - Override the default location for this vhost's access log
# [*error_log*] - Override the default location for this vhost's error log
#
# Actions:
#
# Requires:
#
# Sample Usage:
# nginx::resource::vhost { 'test2.example.com':
#   ensure                => present,
#   server_names          => ['test2.example.com','foo.example.com'],
#   listen_port           => 443,
#   www_root              => '/var/www/nginx-default',
#   ssl                   => true,
#   ssl_cert              => '/tmp/server.crt',
#   ssl_key               => '/tmp/server.pem',
#   auth                  => true,
#   auth_basic            => 'Restricted area',
#   auth_basic_user_file  => '/etc/nginx/passwd',
# }
define nginx::resource::vhost(
  $ensure = 'enable',
  $listen_ip = '*',
  $listen_port = undef,
  $server_names = [$name],
  $default_server = false,
  $ssl = false,
  $ssl_cert = undef,
  $ssl_key = undef,
  $auth = false,
  $auth_basic = undef,
  $auth_basic_user_file = undef,
  $force_ssl = undef,
  $www_root = undef,
  $error_log = false,
  $access_log = false
) {
  File {
    owner  => 'root',
    group  => 'root',
    mode   => '0644',
    notify => Class['nginx::service']
  }

  if ($listen_port == undef) {
    $listen_port_real = $ssl ? {
      false => 80,
      true  => 443
    }
  } else {
      $listen_port_real = $listen_port
  }
  # Check to see if SSL Certificates are properly defined.
  if ($ssl) {
    if ($ssl_cert == undef) or ($ssl_key == undef) {
      fail('nginx: SSL certificate/key (ssl_cert/ssl_key) must be defined and exist on the target system(s)')
    }
  }

  # Check to see if Auth is properly defined
  if ($auth) {
    if ($auth_basic == undef) or ($auth_basic_user_file == undef) {
      fail('nginx: auth_basic and $auth_basic_user_file must be defined if $auth is set')
    }
  }

  file { "${nginx::nx_conf_dir_real}/conf.d/.frag-${name}-001":
    ensure => $ensure ? {
      'absent' => absent,
      default  => present,
    },
    content => template('nginx/vhost/vhost_header.erb'),
    notify  => Class['nginx::service'],
  }
  file { "${nginx::nx_conf_dir_real}/conf.d/.frag-${name}-999":
      ensure => $ensure ? {
        'absent' => absent,
        default  => present,
      },
      content => template('nginx/vhost/vhost_footer.erb'),
      notify  => Class['nginx::service'],
  }
}
